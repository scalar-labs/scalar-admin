plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'application'
    id 'java-library-distribution'
    id 'com.google.protobuf' version '0.8.8'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'com.palantir.docker' version '0.25.0'
}
startScripts.enabled = false

repositories {
    mavenCentral()
}

def grpcVersion = '1.43.2'
def protobufVersion = '3.19.2'
def slf4jVersion = '1.7.36'
def log4jVersion = '2.19.0'

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4jVersion}"
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4jVersion}"
    compile group: 'info.picocli', name: 'picocli', version: '4.0.1'
    compile group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    compile group: 'org.glassfish', name: 'javax.json', version: '1.1.4'
    compile group: 'com.google.api.grpc', name: 'proto-google-common-protos', version: '1.0.0'
    compile group: 'com.google.api.grpc', name: 'googleapis-common-protos', version: '0.0.3'
    compile group: 'io.grpc', name: 'grpc-alts', version: "${grpcVersion}"
    compile group: 'io.grpc', name: 'grpc-netty', version: "${grpcVersion}"
    compile group: 'io.grpc', name: 'grpc-protobuf', version: "${grpcVersion}"
    compile group: 'io.grpc', name: 'grpc-stub', version: "${grpcVersion}"
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: "${protobufVersion}"
    compile group: 'dnsjava', name: 'dnsjava', version: '2.1.9'
    compileOnly group: 'javax.annotation', name: 'javax.annotation-api', version: '1.2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.9.1'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.16.0'
    testCompile group: 'io.grpc', name: 'grpc-testing', version: "${grpcVersion}"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protobufVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
    generatedFilesBaseDir = "$projectDir/src"
}

task AdminCommand(type: CreateStartScripts) {
    mainClassName = 'com.scalar.admin.AdminCommand'
    applicationName = 'scalar-admin'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into('bin') {
    from(AdminCommand)
    fileMode = 0755
}

application {
    mainClassName = 'com.scalar.admin.AdminCommand'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

distZip {
    archiveFileName = "${project.name}.zip"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distTar {
    archiveFileName = "${project.name}.tar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

docker {
    name "${project.name}"
    files tasks.distTar.outputs
}

shadowJar {
    mergeServiceFiles()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "com.scalar-labs"
archivesBaseName = "scalar-admin"
version = "2.0.1"

// for archiving and uploading to maven central
if (!project.gradle.startParameter.taskNames.isEmpty() &&
    (project.gradle.startParameter.taskNames[0].endsWith('publish') ||
     project.gradle.startParameter.taskNames[0].endsWith('publishToMavenLocal'))) {
    apply from: 'archive.gradle'
}
