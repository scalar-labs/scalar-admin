plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'application'
    id 'java-library-distribution'
    id 'com.google.protobuf' version '0.8.19'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'com.palantir.docker' version '0.25.0'
}
startScripts.enabled = false

repositories {
    mavenCentral()
}

def grpcVersion = '1.60.2'
def protobufVersion = '3.25.3'
def slf4jVersion = '1.7.36'
def log4jVersion = '2.23.1'
def picoCliVersion = '4.7.5'
def jakartaJsonApiVersion = '1.1.6'
def jakartaJsonVersion = '1.1.6'
def jakartaAnnotationVersion = '1.3.5'
def dnsJavaVersion = '2.1.9'
def junitVersion = '4.12'
def mockitoVersion = '2.16.0'
def assertJVersion = '3.9.1'
def protoGoogleCommonProtosVersion = '2.36.0'
def googleapisCommonProtosVersion = '0.0.3'

dependencies {
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    implementation "info.picocli:picocli:${picoCliVersion}"
    implementation "jakarta.json:jakarta.json-api:${jakartaJsonApiVersion}"
    implementation "org.glassfish:jakarta.json:${jakartaJsonVersion}"
    implementation "com.google.api.grpc:proto-google-common-protos:${protoGoogleCommonProtosVersion}"
    implementation "com.google.api.grpc:googleapis-common-protos:${googleapisCommonProtosVersion}"
    implementation "io.grpc:grpc-alts:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation "dnsjava:dnsjava:${dnsJavaVersion}"
    compileOnly "jakarta.annotation:jakarta.annotation-api:${jakartaAnnotationVersion}"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protobufVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
    generatedFilesBaseDir = "$projectDir/src"
}

task AdminCommand(type: CreateStartScripts) {
    mainClassName = 'com.scalar.admin.AdminCommand'
    applicationName = 'scalar-admin'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtimeClasspath
}

applicationDistribution.into('bin') {
    from(AdminCommand)
    fileMode = 0755
}

application {
    mainClassName = 'com.scalar.admin.AdminCommand'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

distZip {
    archiveFileName = "${project.name}.zip"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distTar {
    archiveFileName = "${project.name}.tar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

docker {
    name "${project.name}"
    files tasks.distTar.outputs
}

shadowJar {
    mergeServiceFiles()
}

java {
    withJavadocJar()
    withSourcesJar()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "com.scalar-labs"
archivesBaseName = "scalar-admin"
version = "2.2.0"

// for archiving and uploading to maven central
if (!project.gradle.startParameter.taskNames.isEmpty() &&
    (project.gradle.startParameter.taskNames[0].endsWith('publish') ||
     project.gradle.startParameter.taskNames[0].endsWith('publishToMavenLocal'))) {
    apply from: 'archive.gradle'
}
